// Code generated by protoc-gen-go.
// source: proto/inspector.proto
// DO NOT EDIT!

/*
Package lintflow_core is a generated protocol buffer package.

It is generated from these files:
	proto/inspector.proto
	proto/lookupd.proto
	proto/reporter.proto
	proto/resourcer.proto
	proto/validator.proto

It has these top-level messages:
	Task
	Progress
	Service
	ListRequest
	ListResponse
	RegisterRequest
	RegisterResponse
	Problem
	ConfigRequest
	Resource
	ValidationTask
	ValidateProgress
*/
package lintflow_core

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

type Task struct {
	Validators *Task_Args `protobuf:"bytes,1,opt,name=validators" json:"validators,omitempty"`
	Reporters  *Task_Args `protobuf:"bytes,2,opt,name=reporters" json:"reporters,omitempty"`
	Resourcers *Task_Args `protobuf:"bytes,3,opt,name=resourcers" json:"resourcers,omitempty"`
}

func (m *Task) Reset()                    { *m = Task{} }
func (m *Task) String() string            { return proto.CompactTextString(m) }
func (*Task) ProtoMessage()               {}
func (*Task) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Task) GetValidators() *Task_Args {
	if m != nil {
		return m.Validators
	}
	return nil
}

func (m *Task) GetReporters() *Task_Args {
	if m != nil {
		return m.Reporters
	}
	return nil
}

func (m *Task) GetResourcers() *Task_Args {
	if m != nil {
		return m.Resourcers
	}
	return nil
}

type Task_Args struct {
	Service *Service `protobuf:"bytes,1,opt,name=service" json:"service,omitempty"`
	Config  []byte   `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`
}

func (m *Task_Args) Reset()                    { *m = Task_Args{} }
func (m *Task_Args) String() string            { return proto.CompactTextString(m) }
func (*Task_Args) ProtoMessage()               {}
func (*Task_Args) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

func (m *Task_Args) GetService() *Service {
	if m != nil {
		return m.Service
	}
	return nil
}

type Progress struct {
	Id      string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Total   int64  `protobuf:"varint,2,opt,name=total" json:"total,omitempty"`
	Current int64  `protobuf:"varint,3,opt,name=current" json:"current,omitempty"`
}

func (m *Progress) Reset()                    { *m = Progress{} }
func (m *Progress) String() string            { return proto.CompactTextString(m) }
func (*Progress) ProtoMessage()               {}
func (*Progress) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func init() {
	proto.RegisterType((*Task)(nil), "lintflow.core.Task")
	proto.RegisterType((*Task_Args)(nil), "lintflow.core.Task.Args")
	proto.RegisterType((*Progress)(nil), "lintflow.core.Progress")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion1

// Client API for InspectorService service

type InspectorServiceClient interface {
	Inspect(ctx context.Context, in *Task, opts ...grpc.CallOption) (InspectorService_InspectClient, error)
}

type inspectorServiceClient struct {
	cc *grpc.ClientConn
}

func NewInspectorServiceClient(cc *grpc.ClientConn) InspectorServiceClient {
	return &inspectorServiceClient{cc}
}

func (c *inspectorServiceClient) Inspect(ctx context.Context, in *Task, opts ...grpc.CallOption) (InspectorService_InspectClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_InspectorService_serviceDesc.Streams[0], c.cc, "/lintflow.core.InspectorService/Inspect", opts...)
	if err != nil {
		return nil, err
	}
	x := &inspectorServiceInspectClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type InspectorService_InspectClient interface {
	Recv() (*Progress, error)
	grpc.ClientStream
}

type inspectorServiceInspectClient struct {
	grpc.ClientStream
}

func (x *inspectorServiceInspectClient) Recv() (*Progress, error) {
	m := new(Progress)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for InspectorService service

type InspectorServiceServer interface {
	Inspect(*Task, InspectorService_InspectServer) error
}

func RegisterInspectorServiceServer(s *grpc.Server, srv InspectorServiceServer) {
	s.RegisterService(&_InspectorService_serviceDesc, srv)
}

func _InspectorService_Inspect_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Task)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(InspectorServiceServer).Inspect(m, &inspectorServiceInspectServer{stream})
}

type InspectorService_InspectServer interface {
	Send(*Progress) error
	grpc.ServerStream
}

type inspectorServiceInspectServer struct {
	grpc.ServerStream
}

func (x *inspectorServiceInspectServer) Send(m *Progress) error {
	return x.ServerStream.SendMsg(m)
}

var _InspectorService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "lintflow.core.InspectorService",
	HandlerType: (*InspectorServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Inspect",
			Handler:       _InspectorService_Inspect_Handler,
			ServerStreams: true,
		},
	},
}

var fileDescriptor0 = []byte{
	// 276 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x84, 0x91, 0x4f, 0x4f, 0x83, 0x40,
	0x10, 0xc5, 0x05, 0x6a, 0xb1, 0xe3, 0x9f, 0x98, 0xad, 0x56, 0xc2, 0xc9, 0x70, 0xf2, 0x84, 0x4d,
	0x4d, 0x8c, 0x89, 0x27, 0x8f, 0x7a, 0xb1, 0x59, 0xfd, 0x02, 0xb8, 0x6c, 0xc9, 0xa6, 0x1b, 0x86,
	0xcc, 0x2e, 0xf5, 0x0b, 0xf8, 0xc1, 0x85, 0x05, 0x52, 0x6d, 0x9a, 0xf4, 0xc6, 0x1b, 0x7e, 0x6f,
	0xde, 0xdb, 0x0c, 0x5c, 0x57, 0x84, 0x16, 0xef, 0x55, 0x69, 0x2a, 0x29, 0x2c, 0x52, 0xea, 0x34,
	0x3b, 0xd7, 0xaa, 0xb4, 0x2b, 0x8d, 0xdf, 0xa9, 0x40, 0x92, 0xf1, 0xb4, 0xa3, 0x34, 0xe2, 0xba,
	0xae, 0xf2, 0x8e, 0x49, 0x7e, 0x7c, 0x18, 0x7d, 0x66, 0x66, 0xcd, 0x9e, 0x00, 0x36, 0x99, 0x56,
	0x79, 0xd6, 0xf8, 0x4d, 0xe4, 0xdd, 0x7a, 0x77, 0xa7, 0x8b, 0x28, 0xfd, 0xb7, 0x21, 0x6d, 0xc1,
	0xf4, 0x85, 0x0a, 0xc3, 0xff, 0xb0, 0xec, 0x11, 0x26, 0x24, 0x2b, 0x24, 0x2b, 0x1b, 0xa3, 0x7f,
	0xc0, 0xb8, 0x45, 0xdb, 0x44, 0x92, 0x06, 0x6b, 0x12, 0xad, 0x31, 0x38, 0x94, 0xb8, 0x65, 0xe3,
	0x25, 0x8c, 0xda, 0x19, 0x9b, 0x43, 0x68, 0x24, 0x6d, 0x94, 0x90, 0x7d, 0xe1, 0xd9, 0x8e, 0xfd,
	0xa3, 0xfb, 0xcb, 0x07, 0x8c, 0xcd, 0x60, 0x2c, 0xb0, 0x5c, 0xa9, 0xc2, 0x15, 0x3d, 0xe3, 0xbd,
	0x4a, 0xde, 0xe0, 0x64, 0x49, 0x58, 0x34, 0x19, 0x86, 0x5d, 0x80, 0xaf, 0x72, 0xb7, 0x70, 0xc2,
	0x9b, 0x2f, 0x76, 0x05, 0xc7, 0x16, 0x6d, 0xa6, 0x9d, 0x25, 0xe0, 0x9d, 0x60, 0x11, 0x84, 0xa2,
	0x26, 0x92, 0xa5, 0x75, 0xd5, 0x03, 0x3e, 0xc8, 0xc5, 0x3b, 0x5c, 0xbe, 0x0e, 0x97, 0xe8, 0x0b,
	0xb0, 0x67, 0x08, 0xfb, 0x19, 0x9b, 0xee, 0x79, 0x62, 0x7c, 0xb3, 0x33, 0x1c, 0xca, 0x24, 0x47,
	0x73, 0xef, 0x6b, 0xec, 0x4e, 0xf5, 0xf0, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x55, 0x1b, 0xa9, 0xf0,
	0xe7, 0x01, 0x00, 0x00,
}
