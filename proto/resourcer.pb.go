// Code generated by protoc-gen-go.
// source: proto/resourcer.proto
// DO NOT EDIT!

package lintflow_core

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ConfigRequest struct {
	// сам конфиг для получения данных
	Config []byte `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
}

func (m *ConfigRequest) Reset()                    { *m = ConfigRequest{} }
func (m *ConfigRequest) String() string            { return proto.CompactTextString(m) }
func (*ConfigRequest) ProtoMessage()               {}
func (*ConfigRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

type Resource struct {
	Header string `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Body   []byte `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
	Total  int64  `protobuf:"varint,3,opt,name=total" json:"total,omitempty"`
}

func (m *Resource) Reset()                    { *m = Resource{} }
func (m *Resource) String() string            { return proto.CompactTextString(m) }
func (*Resource) ProtoMessage()               {}
func (*Resource) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{1} }

func init() {
	proto.RegisterType((*ConfigRequest)(nil), "lintflow.core.ConfigRequest")
	proto.RegisterType((*Resource)(nil), "lintflow.core.Resource")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion2

// Client API for ResourcerService service

type ResourcerServiceClient interface {
	// валидатор запросит паритию данных, получит их по стриму и дальше попросит по стриму еще данных
	Get(ctx context.Context, in *ConfigRequest, opts ...grpc.CallOption) (ResourcerService_GetClient, error)
}

type resourcerServiceClient struct {
	cc *grpc.ClientConn
}

func NewResourcerServiceClient(cc *grpc.ClientConn) ResourcerServiceClient {
	return &resourcerServiceClient{cc}
}

func (c *resourcerServiceClient) Get(ctx context.Context, in *ConfigRequest, opts ...grpc.CallOption) (ResourcerService_GetClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ResourcerService_serviceDesc.Streams[0], c.cc, "/lintflow.core.ResourcerService/Get", opts...)
	if err != nil {
		return nil, err
	}
	x := &resourcerServiceGetClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ResourcerService_GetClient interface {
	Recv() (*Resource, error)
	grpc.ClientStream
}

type resourcerServiceGetClient struct {
	grpc.ClientStream
}

func (x *resourcerServiceGetClient) Recv() (*Resource, error) {
	m := new(Resource)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for ResourcerService service

type ResourcerServiceServer interface {
	// валидатор запросит паритию данных, получит их по стриму и дальше попросит по стриму еще данных
	Get(*ConfigRequest, ResourcerService_GetServer) error
}

func RegisterResourcerServiceServer(s *grpc.Server, srv ResourcerServiceServer) {
	s.RegisterService(&_ResourcerService_serviceDesc, srv)
}

func _ResourcerService_Get_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ConfigRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ResourcerServiceServer).Get(m, &resourcerServiceGetServer{stream})
}

type ResourcerService_GetServer interface {
	Send(*Resource) error
	grpc.ServerStream
}

type resourcerServiceGetServer struct {
	grpc.ServerStream
}

func (x *resourcerServiceGetServer) Send(m *Resource) error {
	return x.ServerStream.SendMsg(m)
}

var _ResourcerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "lintflow.core.ResourcerService",
	HandlerType: (*ResourcerServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Get",
			Handler:       _ResourcerService_Get_Handler,
			ServerStreams: true,
		},
	},
}

var fileDescriptor3 = []byte{
	// 187 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x12, 0x2d, 0x28, 0xca, 0x2f,
	0xc9, 0xd7, 0x2f, 0x4a, 0x2d, 0xce, 0x2f, 0x2d, 0x4a, 0x4e, 0x2d, 0xd2, 0x03, 0xf3, 0x85, 0x78,
	0x73, 0x32, 0xf3, 0x4a, 0xd2, 0x72, 0xf2, 0xcb, 0xf5, 0x92, 0xf3, 0x8b, 0x52, 0x95, 0xd4, 0xb9,
	0x78, 0x9d, 0xf3, 0xf3, 0xd2, 0x32, 0xd3, 0x83, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0x84, 0xc4,
	0xb8, 0xd8, 0x92, 0xc1, 0x02, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x3c, 0x41, 0x50, 0x9e, 0x92, 0x0f,
	0x17, 0x47, 0x10, 0xd4, 0x28, 0x90, 0x9a, 0x8c, 0xd4, 0xc4, 0x94, 0xd4, 0x22, 0xb0, 0x1a, 0xce,
	0x20, 0x28, 0x4f, 0x48, 0x88, 0x8b, 0x25, 0x29, 0x3f, 0xa5, 0x52, 0x82, 0x09, 0xac, 0x13, 0xcc,
	0x16, 0x12, 0xe1, 0x62, 0x2d, 0xc9, 0x2f, 0x49, 0xcc, 0x91, 0x60, 0x06, 0x0a, 0x32, 0x07, 0x41,
	0x38, 0x46, 0x21, 0x5c, 0x02, 0x30, 0xd3, 0x8a, 0x82, 0x53, 0x8b, 0xca, 0x32, 0x81, 0xa6, 0x3a,
	0x70, 0x31, 0xbb, 0xa7, 0x96, 0x08, 0xc9, 0xe8, 0xa1, 0xb8, 0x50, 0x0f, 0xc5, 0x79, 0x52, 0xe2,
	0x68, 0xb2, 0x30, 0x53, 0x94, 0x18, 0x0c, 0x18, 0x93, 0xd8, 0xc0, 0x5e, 0x34, 0x06, 0x04, 0x00,
	0x00, 0xff, 0xff, 0x1b, 0x0b, 0xf3, 0x87, 0xfb, 0x00, 0x00, 0x00,
}
