// Code generated by protoc-gen-go.
// source: proto/validator.proto
// DO NOT EDIT!

package lintflow_core

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ValidationTask struct {
	Config    []byte               `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	Reporter  *ValidationTask_Args `protobuf:"bytes,2,opt,name=reporter" json:"reporter,omitempty"`
	Resourcer *ValidationTask_Args `protobuf:"bytes,3,opt,name=resourcer" json:"resourcer,omitempty"`
}

func (m *ValidationTask) Reset()                    { *m = ValidationTask{} }
func (m *ValidationTask) String() string            { return proto.CompactTextString(m) }
func (*ValidationTask) ProtoMessage()               {}
func (*ValidationTask) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{0} }

func (m *ValidationTask) GetReporter() *ValidationTask_Args {
	if m != nil {
		return m.Reporter
	}
	return nil
}

func (m *ValidationTask) GetResourcer() *ValidationTask_Args {
	if m != nil {
		return m.Resourcer
	}
	return nil
}

type ValidationTask_Args struct {
	Service *Service `protobuf:"bytes,1,opt,name=service" json:"service,omitempty"`
	Config  []byte   `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`
}

func (m *ValidationTask_Args) Reset()                    { *m = ValidationTask_Args{} }
func (m *ValidationTask_Args) String() string            { return proto.CompactTextString(m) }
func (*ValidationTask_Args) ProtoMessage()               {}
func (*ValidationTask_Args) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{0, 0} }

func (m *ValidationTask_Args) GetService() *Service {
	if m != nil {
		return m.Service
	}
	return nil
}

type ValidateProgress struct {
	Reporter  *ValidateProgress_Progress `protobuf:"bytes,1,opt,name=reporter" json:"reporter,omitempty"`
	Resourser *ValidateProgress_Progress `protobuf:"bytes,2,opt,name=resourser" json:"resourser,omitempty"`
}

func (m *ValidateProgress) Reset()                    { *m = ValidateProgress{} }
func (m *ValidateProgress) String() string            { return proto.CompactTextString(m) }
func (*ValidateProgress) ProtoMessage()               {}
func (*ValidateProgress) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{1} }

func (m *ValidateProgress) GetReporter() *ValidateProgress_Progress {
	if m != nil {
		return m.Reporter
	}
	return nil
}

func (m *ValidateProgress) GetResourser() *ValidateProgress_Progress {
	if m != nil {
		return m.Resourser
	}
	return nil
}

type ValidateProgress_Progress struct {
	//  ID of service
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// all data
	Total int64 `protobuf:"varint,2,opt,name=total" json:"total,omitempty"`
	// already processed
	Current int64 `protobuf:"varint,3,opt,name=current" json:"current,omitempty"`
}

func (m *ValidateProgress_Progress) Reset()                    { *m = ValidateProgress_Progress{} }
func (m *ValidateProgress_Progress) String() string            { return proto.CompactTextString(m) }
func (*ValidateProgress_Progress) ProtoMessage()               {}
func (*ValidateProgress_Progress) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{1, 0} }

func init() {
	proto.RegisterType((*ValidationTask)(nil), "lintflow.core.ValidationTask")
	proto.RegisterType((*ValidationTask_Args)(nil), "lintflow.core.ValidationTask.Args")
	proto.RegisterType((*ValidateProgress)(nil), "lintflow.core.ValidateProgress")
	proto.RegisterType((*ValidateProgress_Progress)(nil), "lintflow.core.ValidateProgress.Progress")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion1

// Client API for ValidatorService service

type ValidatorServiceClient interface {
	Validate(ctx context.Context, in *ValidationTask, opts ...grpc.CallOption) (ValidatorService_ValidateClient, error)
}

type validatorServiceClient struct {
	cc *grpc.ClientConn
}

func NewValidatorServiceClient(cc *grpc.ClientConn) ValidatorServiceClient {
	return &validatorServiceClient{cc}
}

func (c *validatorServiceClient) Validate(ctx context.Context, in *ValidationTask, opts ...grpc.CallOption) (ValidatorService_ValidateClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ValidatorService_serviceDesc.Streams[0], c.cc, "/lintflow.core.ValidatorService/Validate", opts...)
	if err != nil {
		return nil, err
	}
	x := &validatorServiceValidateClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ValidatorService_ValidateClient interface {
	Recv() (*ValidateProgress, error)
	grpc.ClientStream
}

type validatorServiceValidateClient struct {
	grpc.ClientStream
}

func (x *validatorServiceValidateClient) Recv() (*ValidateProgress, error) {
	m := new(ValidateProgress)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for ValidatorService service

type ValidatorServiceServer interface {
	Validate(*ValidationTask, ValidatorService_ValidateServer) error
}

func RegisterValidatorServiceServer(s *grpc.Server, srv ValidatorServiceServer) {
	s.RegisterService(&_ValidatorService_serviceDesc, srv)
}

func _ValidatorService_Validate_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ValidationTask)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ValidatorServiceServer).Validate(m, &validatorServiceValidateServer{stream})
}

type ValidatorService_ValidateServer interface {
	Send(*ValidateProgress) error
	grpc.ServerStream
}

type validatorServiceValidateServer struct {
	grpc.ServerStream
}

func (x *validatorServiceValidateServer) Send(m *ValidateProgress) error {
	return x.ServerStream.SendMsg(m)
}

var _ValidatorService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "lintflow.core.ValidatorService",
	HandlerType: (*ValidatorServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Validate",
			Handler:       _ValidatorService_Validate_Handler,
			ServerStreams: true,
		},
	},
}

var fileDescriptor4 = []byte{
	// 311 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x52, 0x4f, 0x4b, 0xfb, 0x40,
	0x10, 0xfd, 0xa5, 0xfd, 0xd9, 0x3f, 0x53, 0x2d, 0xb2, 0x6a, 0x29, 0x01, 0x51, 0x72, 0xea, 0x69,
	0x2d, 0xf5, 0x2e, 0x0a, 0xe2, 0xc1, 0x83, 0x94, 0x55, 0xbc, 0xa7, 0xe9, 0x36, 0x2c, 0x0d, 0x99,
	0x30, 0xbb, 0xa9, 0x5f, 0xda, 0x8f, 0xe0, 0xc1, 0xb8, 0x9b, 0xa4, 0xa9, 0x88, 0xf6, 0x36, 0x2f,
	0x33, 0xef, 0xcd, 0x7b, 0x93, 0x85, 0xb3, 0x8c, 0xd0, 0xe0, 0xd5, 0x26, 0x4c, 0xd4, 0x32, 0x34,
	0x48, 0xdc, 0x62, 0x76, 0x94, 0xa8, 0xd4, 0xac, 0x12, 0x7c, 0xe3, 0x11, 0x92, 0xf4, 0x4f, 0xdc,
	0x54, 0x82, 0xb8, 0xce, 0xb3, 0xa5, 0x9b, 0x09, 0x3e, 0x3c, 0x18, 0xbe, 0x3a, 0x9e, 0xc2, 0xf4,
	0x25, 0xd4, 0x6b, 0x36, 0x82, 0x4e, 0x84, 0xe9, 0x4a, 0xc5, 0x63, 0xef, 0xd2, 0x9b, 0x1c, 0x8a,
	0x12, 0xb1, 0x1b, 0xe8, 0x91, 0xcc, 0x90, 0x8c, 0xa4, 0x71, 0xab, 0xe8, 0x0c, 0x66, 0x01, 0xdf,
	0xd9, 0xc0, 0x77, 0x85, 0xf8, 0x1d, 0xc5, 0x5a, 0xd4, 0x1c, 0x76, 0x0b, 0x7d, 0x92, 0x1a, 0x73,
	0x8a, 0x0a, 0x81, 0xf6, 0xde, 0x02, 0x5b, 0x92, 0x3f, 0x87, 0xff, 0x5f, 0x9f, 0xd8, 0x14, 0xba,
	0x5a, 0xd2, 0x46, 0x45, 0xd2, 0x5a, 0x1c, 0xcc, 0x46, 0xdf, 0x74, 0x9e, 0x5d, 0x57, 0x54, 0x63,
	0x8d, 0x4c, 0xad, 0x66, 0xa6, 0xe0, 0xdd, 0x83, 0xe3, 0x72, 0xa9, 0x9c, 0x13, 0xc6, 0xc5, 0x2e,
	0xcd, 0xee, 0x1b, 0x41, 0x9d, 0xfe, 0xe4, 0x67, 0x9f, 0x35, 0x85, 0x57, 0x45, 0x23, 0xee, 0x43,
	0x15, 0x57, 0xd7, 0xf7, 0xda, 0x5f, 0x66, 0x4b, 0xf5, 0x1f, 0xa1, 0x57, 0x3b, 0x1b, 0x42, 0x4b,
	0x2d, 0xad, 0xa7, 0xbe, 0x28, 0x2a, 0x76, 0x0a, 0x07, 0x06, 0x4d, 0x98, 0x58, 0xfd, 0xb6, 0x70,
	0x80, 0x8d, 0xa1, 0x1b, 0xe5, 0x44, 0x32, 0x35, 0xf6, 0xcc, 0x6d, 0x51, 0xc1, 0xd9, 0xa2, 0x4e,
	0x8b, 0x54, 0xde, 0x88, 0x3d, 0x41, 0xaf, 0xf2, 0xc1, 0xce, 0x7f, 0xfd, 0x1f, 0xfe, 0xc5, 0x1f,
	0xfe, 0x83, 0x7f, 0x53, 0x6f, 0xd1, 0xb1, 0x0f, 0xeb, 0xfa, 0x33, 0x00, 0x00, 0xff, 0xff, 0x65,
	0xe0, 0xba, 0x58, 0x95, 0x02, 0x00, 0x00,
}
