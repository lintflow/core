// Code generated by protoc-gen-go.
// source: proto/reporter.proto
// DO NOT EDIT!

package lintflow_core

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Problem struct {
}

func (m *Problem) Reset()                    { *m = Problem{} }
func (m *Problem) String() string            { return proto.CompactTextString(m) }
func (*Problem) ProtoMessage()               {}
func (*Problem) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func init() {
	proto.RegisterType((*Problem)(nil), "lintflow.core.Problem")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion1

// Client API for ReporterService service

type ReporterServiceClient interface {
}

type reporterServiceClient struct {
	cc *grpc.ClientConn
}

func NewReporterServiceClient(cc *grpc.ClientConn) ReporterServiceClient {
	return &reporterServiceClient{cc}
}

// Server API for ReporterService service

type ReporterServiceServer interface {
}

func RegisterReporterServiceServer(s *grpc.Server, srv ReporterServiceServer) {
	s.RegisterService(&_ReporterService_serviceDesc, srv)
}

var _ReporterService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "lintflow.core.ReporterService",
	HandlerType: (*ReporterServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
}

var fileDescriptor2 = []byte{
	// 88 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x12, 0x29, 0x28, 0xca, 0x2f,
	0xc9, 0xd7, 0x2f, 0x4a, 0x2d, 0xc8, 0x2f, 0x2a, 0x49, 0x2d, 0xd2, 0x03, 0x73, 0x85, 0x78, 0x73,
	0x32, 0xf3, 0x4a, 0xd2, 0x72, 0xf2, 0xcb, 0xf5, 0x92, 0xf3, 0x8b, 0x52, 0x95, 0x38, 0xb9, 0xd8,
	0x03, 0x8a, 0xf2, 0x93, 0x72, 0x52, 0x73, 0x8d, 0x04, 0xb9, 0xf8, 0x83, 0xa0, 0x6a, 0x83, 0x53,
	0x8b, 0xca, 0x32, 0x93, 0x53, 0x93, 0xd8, 0xc0, 0x7a, 0x8c, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff,
	0xd0, 0xdb, 0x6c, 0x9f, 0x4b, 0x00, 0x00, 0x00,
}
