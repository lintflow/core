// Code generated by protoc-gen-go.
// source: proto/reporter.proto
// DO NOT EDIT!

package lintflow_core

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Problem struct {
	Id       string            `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Original []byte            `protobuf:"bytes,2,opt,name=original,proto3" json:"original,omitempty"`
	Details  []*Problem_Detail `protobuf:"bytes,3,rep,name=details" json:"details,omitempty"`
}

func (m *Problem) Reset()                    { *m = Problem{} }
func (m *Problem) String() string            { return proto.CompactTextString(m) }
func (*Problem) ProtoMessage()               {}
func (*Problem) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *Problem) GetDetails() []*Problem_Detail {
	if m != nil {
		return m.Details
	}
	return nil
}

type Problem_Detail struct {
	Id          string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Fragment    []byte `protobuf:"bytes,2,opt,name=fragment,proto3" json:"fragment,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
}

func (m *Problem_Detail) Reset()                    { *m = Problem_Detail{} }
func (m *Problem_Detail) String() string            { return proto.CompactTextString(m) }
func (*Problem_Detail) ProtoMessage()               {}
func (*Problem_Detail) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0, 0} }

type ReportSummary struct {
	Link  string `protobuf:"bytes,1,opt,name=link" json:"link,omitempty"`
	Total int64  `protobuf:"varint,2,opt,name=total" json:"total,omitempty"`
}

func (m *ReportSummary) Reset()                    { *m = ReportSummary{} }
func (m *ReportSummary) String() string            { return proto.CompactTextString(m) }
func (*ReportSummary) ProtoMessage()               {}
func (*ReportSummary) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func init() {
	proto.RegisterType((*Problem)(nil), "lintflow.core.Problem")
	proto.RegisterType((*Problem_Detail)(nil), "lintflow.core.Problem.Detail")
	proto.RegisterType((*ReportSummary)(nil), "lintflow.core.ReportSummary")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion1

// Client API for ReporterService service

type ReporterServiceClient interface {
	Record(ctx context.Context, opts ...grpc.CallOption) (ReporterService_RecordClient, error)
}

type reporterServiceClient struct {
	cc *grpc.ClientConn
}

func NewReporterServiceClient(cc *grpc.ClientConn) ReporterServiceClient {
	return &reporterServiceClient{cc}
}

func (c *reporterServiceClient) Record(ctx context.Context, opts ...grpc.CallOption) (ReporterService_RecordClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ReporterService_serviceDesc.Streams[0], c.cc, "/lintflow.core.ReporterService/Record", opts...)
	if err != nil {
		return nil, err
	}
	x := &reporterServiceRecordClient{stream}
	return x, nil
}

type ReporterService_RecordClient interface {
	Send(*Problem) error
	CloseAndRecv() (*ReportSummary, error)
	grpc.ClientStream
}

type reporterServiceRecordClient struct {
	grpc.ClientStream
}

func (x *reporterServiceRecordClient) Send(m *Problem) error {
	return x.ClientStream.SendMsg(m)
}

func (x *reporterServiceRecordClient) CloseAndRecv() (*ReportSummary, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ReportSummary)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for ReporterService service

type ReporterServiceServer interface {
	Record(ReporterService_RecordServer) error
}

func RegisterReporterServiceServer(s *grpc.Server, srv ReporterServiceServer) {
	s.RegisterService(&_ReporterService_serviceDesc, srv)
}

func _ReporterService_Record_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ReporterServiceServer).Record(&reporterServiceRecordServer{stream})
}

type ReporterService_RecordServer interface {
	SendAndClose(*ReportSummary) error
	Recv() (*Problem, error)
	grpc.ServerStream
}

type reporterServiceRecordServer struct {
	grpc.ServerStream
}

func (x *reporterServiceRecordServer) SendAndClose(m *ReportSummary) error {
	return x.ServerStream.SendMsg(m)
}

func (x *reporterServiceRecordServer) Recv() (*Problem, error) {
	m := new(Problem)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _ReporterService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "lintflow.core.ReporterService",
	HandlerType: (*ReporterServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Record",
			Handler:       _ReporterService_Record_Handler,
			ClientStreams: true,
		},
	},
}

var fileDescriptor2 = []byte{
	// 253 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x6c, 0x90, 0x41, 0x4b, 0xc3, 0x40,
	0x10, 0x85, 0x4d, 0xa3, 0xa9, 0x4e, 0xad, 0xc2, 0x50, 0x24, 0x04, 0x85, 0x90, 0x53, 0x4e, 0x11,
	0xea, 0x41, 0xbc, 0x8a, 0x3f, 0x40, 0xb6, 0xe8, 0x3d, 0x4d, 0xa6, 0x65, 0x71, 0x93, 0x09, 0xd3,
	0x55, 0xf1, 0x0f, 0xfa, 0xbb, 0x5c, 0xb7, 0x89, 0xd8, 0xd2, 0xdb, 0xbc, 0xc7, 0xec, 0x7c, 0xfb,
	0x1e, 0xcc, 0x3a, 0x61, 0xcb, 0xb7, 0x42, 0x1d, 0x8b, 0x25, 0x29, 0xbc, 0xc4, 0xa9, 0xd1, 0xad,
	0x5d, 0x19, 0xfe, 0x2c, 0x2a, 0x16, 0xca, 0xbe, 0x03, 0x18, 0x3f, 0x0b, 0x2f, 0x0d, 0x35, 0x78,
	0x01, 0x23, 0x5d, 0xc7, 0x41, 0x1a, 0xe4, 0x67, 0xca, 0x4d, 0x98, 0xc0, 0x29, 0x8b, 0x5e, 0xeb,
	0xb6, 0x34, 0xf1, 0xc8, 0xb9, 0xe7, 0xea, 0x4f, 0xe3, 0x3d, 0x8c, 0x6b, 0xb2, 0xa5, 0x36, 0x9b,
	0x38, 0x4c, 0xc3, 0x7c, 0x32, 0xbf, 0x29, 0x76, 0x0e, 0x17, 0xfd, 0xd1, 0xe2, 0xc9, 0x6f, 0xa9,
	0x61, 0x3b, 0x79, 0x85, 0x68, 0x6b, 0x1d, 0xc2, 0xad, 0xa4, 0x5c, 0x37, 0xd4, 0xda, 0x01, 0x37,
	0x68, 0x4c, 0x61, 0x52, 0xd3, 0xa6, 0x12, 0xdd, 0x59, 0xcd, 0xad, 0x43, 0xfe, 0x3e, 0xfa, 0x6f,
	0x65, 0x0f, 0x30, 0x55, 0x3e, 0xe9, 0xe2, 0xbd, 0x69, 0x4a, 0xf9, 0x42, 0x84, 0x63, 0xf7, 0xa3,
	0xb7, 0x1e, 0xe0, 0x67, 0x9c, 0xc1, 0x89, 0x65, 0xdb, 0xc7, 0x09, 0xd5, 0x56, 0xcc, 0x5f, 0xe0,
	0x52, 0xf5, 0x25, 0x2d, 0x48, 0x3e, 0x74, 0x45, 0xf8, 0x08, 0x91, 0x22, 0x97, 0xa3, 0xc6, 0xab,
	0xc3, 0xb9, 0x92, 0xeb, 0x3d, 0x7f, 0x07, 0x9e, 0x1d, 0xe5, 0xc1, 0x32, 0xf2, 0x85, 0xdf, 0xfd,
	0x04, 0x00, 0x00, 0xff, 0xff, 0xa6, 0x60, 0xd2, 0x17, 0x88, 0x01, 0x00, 0x00,
}
